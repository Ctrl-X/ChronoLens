"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const client_s3_1 = require("@aws-sdk/client-s3");
const s3_request_presigner_1 = require("@aws-sdk/s3-request-presigner");
const { v4: uuidv4 } = require("uuid");
const bucketName = process.env.BUCKET;
const s3Client = new client_s3_1.S3Client({ region: "us-west-2" });
async function uploadToS3(image) {
    if (!image) {
        return {
            statusCode: 400,
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ message: "Missing 'fileFromUi' file in form-data" }),
        };
    }
    const fileName = randomFileName(image);
    // Create the param to upload the file in S3
    const uploadParams = {
        Bucket: bucketName,
        Key: fileName,
        Body: Buffer.from(image.content, "binary"),
        ContentType: image.contentType,
    };
    try {
        // Upload data to the specified bucket
        const data = await s3Client.send(new client_s3_1.PutObjectCommand(uploadParams));
        // generate a signed URL
        const signedUrl = await (0, s3_request_presigner_1.getSignedUrl)(s3Client, new client_s3_1.GetObjectCommand({
            Bucket: bucketName,
            Key: fileName,
        }), { expiresIn: 600 } // 600 seconds = 10 minutes
        );
        return {
            statusCode: 200,
            fileName: signedUrl
        };
    }
    catch (err) {
        console.error("Error invoking S3:", err);
        return {
            statusCode: 500,
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({
                message: "Failed to upload the file",
                error: err.message,
            }),
        };
    }
}
function randomFileName(image) {
    const filename = image.filename;
    let fileParts = filename.split(".");
    let fileFormat = fileParts[fileParts.length - 1];
    return uuidv4() + "." + fileFormat;
}
exports.default = uploadToS3;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiczNVdGlscy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInMzVXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxrREFBaUY7QUFDakYsd0VBQTREO0FBRTVELE1BQU0sRUFBRSxFQUFFLEVBQUUsTUFBTSxFQUFFLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFBO0FBRXRDLE1BQU0sVUFBVSxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsTUFBTyxDQUFBO0FBQ3RDLE1BQU0sUUFBUSxHQUFHLElBQUksb0JBQVEsQ0FBQyxFQUFFLE1BQU0sRUFBRSxXQUFXLEVBQUUsQ0FBQyxDQUFBO0FBRXRELEtBQUssVUFBVSxVQUFVLENBQUMsS0FBVTtJQUNoQyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDVCxPQUFPO1lBQ0gsVUFBVSxFQUFFLEdBQUc7WUFDZixPQUFPLEVBQUUsRUFBRSxjQUFjLEVBQUUsa0JBQWtCLEVBQUU7WUFDL0MsSUFBSSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBRSxPQUFPLEVBQUUsd0NBQXdDLEVBQUUsQ0FBQztTQUM5RSxDQUFBO0lBQ0wsQ0FBQztJQUNELE1BQU0sUUFBUSxHQUFHLGNBQWMsQ0FBQyxLQUFLLENBQUMsQ0FBQTtJQUN0Qyw0Q0FBNEM7SUFDNUMsTUFBTSxZQUFZLEdBQUc7UUFDakIsTUFBTSxFQUFFLFVBQVU7UUFDbEIsR0FBRyxFQUFFLFFBQVE7UUFDYixJQUFJLEVBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLFFBQVEsQ0FBQztRQUMxQyxXQUFXLEVBQUUsS0FBSyxDQUFDLFdBQVc7S0FDakMsQ0FBQTtJQUVELElBQUksQ0FBQztRQUNELHNDQUFzQztRQUN0QyxNQUFNLElBQUksR0FBRyxNQUFNLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSw0QkFBZ0IsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFBO1FBRXBFLHdCQUF3QjtRQUN4QixNQUFNLFNBQVMsR0FBRyxNQUFNLElBQUEsbUNBQVksRUFDaEMsUUFBUSxFQUNSLElBQUksNEJBQWdCLENBQUM7WUFDakIsTUFBTSxFQUFFLFVBQVU7WUFDbEIsR0FBRyxFQUFFLFFBQVE7U0FDaEIsQ0FBQyxFQUNGLEVBQUUsU0FBUyxFQUFFLEdBQUcsRUFBRSxDQUFDLDJCQUEyQjtTQUNqRCxDQUFBO1FBRUQsT0FBTztZQUNILFVBQVUsRUFBRSxHQUFHO1lBQ2YsUUFBUSxFQUFDLFNBQVM7U0FDckIsQ0FBQTtJQUNMLENBQUM7SUFBQyxPQUFPLEdBQVEsRUFBRSxDQUFDO1FBQ2hCLE9BQU8sQ0FBQyxLQUFLLENBQUMsb0JBQW9CLEVBQUUsR0FBRyxDQUFDLENBQUE7UUFDeEMsT0FBTztZQUNILFVBQVUsRUFBRSxHQUFHO1lBQ2YsT0FBTyxFQUFFLEVBQUUsY0FBYyxFQUFFLGtCQUFrQixFQUFFO1lBQy9DLElBQUksRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDO2dCQUNqQixPQUFPLEVBQUUsMkJBQTJCO2dCQUNwQyxLQUFLLEVBQUUsR0FBRyxDQUFDLE9BQU87YUFDckIsQ0FBQztTQUNMLENBQUE7SUFDTCxDQUFDO0FBQ0wsQ0FBQztBQUVELFNBQVMsY0FBYyxDQUFDLEtBQVU7SUFDOUIsTUFBTSxRQUFRLEdBQUcsS0FBSyxDQUFDLFFBQVEsQ0FBQTtJQUMvQixJQUFJLFNBQVMsR0FBRyxRQUFRLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFBO0lBQ25DLElBQUksVUFBVSxHQUFHLFNBQVMsQ0FBQyxTQUFTLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFBO0lBQ2hELE9BQU8sTUFBTSxFQUFFLEdBQUcsR0FBRyxHQUFHLFVBQVUsQ0FBQTtBQUN0QyxDQUFDO0FBRUQsa0JBQWUsVUFBVSxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgR2V0T2JqZWN0Q29tbWFuZCwgUHV0T2JqZWN0Q29tbWFuZCwgUzNDbGllbnQgfSBmcm9tIFwiQGF3cy1zZGsvY2xpZW50LXMzXCJcbmltcG9ydCB7IGdldFNpZ25lZFVybCB9IGZyb20gXCJAYXdzLXNkay9zMy1yZXF1ZXN0LXByZXNpZ25lclwiXG5cbmNvbnN0IHsgdjQ6IHV1aWR2NCB9ID0gcmVxdWlyZShcInV1aWRcIilcblxuY29uc3QgYnVja2V0TmFtZSA9IHByb2Nlc3MuZW52LkJVQ0tFVCFcbmNvbnN0IHMzQ2xpZW50ID0gbmV3IFMzQ2xpZW50KHsgcmVnaW9uOiBcInVzLXdlc3QtMlwiIH0pXG5cbmFzeW5jIGZ1bmN0aW9uIHVwbG9hZFRvUzMoaW1hZ2U6IGFueSkge1xuICAgIGlmICghaW1hZ2UpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHN0YXR1c0NvZGU6IDQwMCxcbiAgICAgICAgICAgIGhlYWRlcnM6IHsgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIgfSxcbiAgICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHsgbWVzc2FnZTogXCJNaXNzaW5nICdmaWxlRnJvbVVpJyBmaWxlIGluIGZvcm0tZGF0YVwiIH0pLFxuICAgICAgICB9XG4gICAgfVxuICAgIGNvbnN0IGZpbGVOYW1lID0gcmFuZG9tRmlsZU5hbWUoaW1hZ2UpXG4gICAgLy8gQ3JlYXRlIHRoZSBwYXJhbSB0byB1cGxvYWQgdGhlIGZpbGUgaW4gUzNcbiAgICBjb25zdCB1cGxvYWRQYXJhbXMgPSB7XG4gICAgICAgIEJ1Y2tldDogYnVja2V0TmFtZSxcbiAgICAgICAgS2V5OiBmaWxlTmFtZSxcbiAgICAgICAgQm9keTogQnVmZmVyLmZyb20oaW1hZ2UuY29udGVudCwgXCJiaW5hcnlcIiksXG4gICAgICAgIENvbnRlbnRUeXBlOiBpbWFnZS5jb250ZW50VHlwZSxcbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgICAvLyBVcGxvYWQgZGF0YSB0byB0aGUgc3BlY2lmaWVkIGJ1Y2tldFxuICAgICAgICBjb25zdCBkYXRhID0gYXdhaXQgczNDbGllbnQuc2VuZChuZXcgUHV0T2JqZWN0Q29tbWFuZCh1cGxvYWRQYXJhbXMpKVxuXG4gICAgICAgIC8vIGdlbmVyYXRlIGEgc2lnbmVkIFVSTFxuICAgICAgICBjb25zdCBzaWduZWRVcmwgPSBhd2FpdCBnZXRTaWduZWRVcmwoXG4gICAgICAgICAgICBzM0NsaWVudCxcbiAgICAgICAgICAgIG5ldyBHZXRPYmplY3RDb21tYW5kKHtcbiAgICAgICAgICAgICAgICBCdWNrZXQ6IGJ1Y2tldE5hbWUsXG4gICAgICAgICAgICAgICAgS2V5OiBmaWxlTmFtZSxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgeyBleHBpcmVzSW46IDYwMCB9IC8vIDYwMCBzZWNvbmRzID0gMTAgbWludXRlc1xuICAgICAgICApXG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHN0YXR1c0NvZGU6IDIwMCxcbiAgICAgICAgICAgIGZpbGVOYW1lOnNpZ25lZFVybFxuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZXJyOiBhbnkpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIGludm9raW5nIFMzOlwiLCBlcnIpXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzdGF0dXNDb2RlOiA1MDAsXG4gICAgICAgICAgICBoZWFkZXJzOiB7IFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiIH0sXG4gICAgICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgICAgICAgbWVzc2FnZTogXCJGYWlsZWQgdG8gdXBsb2FkIHRoZSBmaWxlXCIsXG4gICAgICAgICAgICAgICAgZXJyb3I6IGVyci5tZXNzYWdlLFxuICAgICAgICAgICAgfSksXG4gICAgICAgIH1cbiAgICB9XG59XG5cbmZ1bmN0aW9uIHJhbmRvbUZpbGVOYW1lKGltYWdlOiBhbnkpIHtcbiAgICBjb25zdCBmaWxlbmFtZSA9IGltYWdlLmZpbGVuYW1lXG4gICAgbGV0IGZpbGVQYXJ0cyA9IGZpbGVuYW1lLnNwbGl0KFwiLlwiKVxuICAgIGxldCBmaWxlRm9ybWF0ID0gZmlsZVBhcnRzW2ZpbGVQYXJ0cy5sZW5ndGggLSAxXVxuICAgIHJldHVybiB1dWlkdjQoKSArIFwiLlwiICsgZmlsZUZvcm1hdFxufVxuXG5leHBvcnQgZGVmYXVsdCB1cGxvYWRUb1MzXG4iXX0=