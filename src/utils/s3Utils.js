"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.loadFromS3 = exports.uploadToS3 = void 0;
const client_s3_1 = require("@aws-sdk/client-s3");
const { v4: uuidv4 } = require("uuid");
const bucketName = process.env.BUCKET;
const s3Client = new client_s3_1.S3Client({ region: "us-west-2" });
async function uploadToS3(image) {
    if (!image) {
        return {
            statusCode: 400,
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ message: "Missing 'fileFromUi' file in form-data" }),
        };
    }
    const fileName = randomFileName(image);
    // Create the param to upload the file in S3
    const uploadParams = {
        Bucket: bucketName,
        Key: fileName,
        Body: Buffer.from(image.content, "binary"),
        ContentType: image.contentType,
    };
    try {
        // Upload data to the specified bucket
        await s3Client.send(new client_s3_1.PutObjectCommand(uploadParams));
        // Example to generate a signed URL to display the file in the front end :
        // const signedUrl = await getSignedUrl(
        //     s3Client,
        //     new GetObjectCommand({
        //         Bucket: bucketName,
        //         Key: fileName,
        //     }),
        //     { expiresIn: 600 } // 600 seconds = 10 minutes
        // )
        return {
            statusCode: 200,
            fileName,
            // signedUrl
        };
    }
    catch (err) {
        console.error("Error invoking S3:", err);
        return {
            statusCode: 500,
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({
                message: "Failed to upload the file",
                error: err.message,
            }),
        };
    }
}
exports.uploadToS3 = uploadToS3;
async function loadFromS3(filename) {
    const getObjectParams = {
        Bucket: bucketName,
        Key: filename
    };
    const { Body } = await s3Client.send(new client_s3_1.GetObjectCommand(getObjectParams));
    const streamToBuffer = async (stream) => {
        const chunks = [];
        for await (const chunk of stream) {
            chunks.push(chunk);
        }
        return Buffer.concat(chunks);
    };
    return await streamToBuffer(Body);
}
exports.loadFromS3 = loadFromS3;
function randomFileName(image) {
    const filename = image.filename;
    let fileParts = filename.split(".");
    let fileFormat = fileParts[fileParts.length - 1];
    return uuidv4() + "." + fileFormat;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiczNVdGlscy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInMzVXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsa0RBQStFO0FBRy9FLE1BQU0sRUFBQyxFQUFFLEVBQUUsTUFBTSxFQUFDLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFBO0FBRXBDLE1BQU0sVUFBVSxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsTUFBTyxDQUFBO0FBQ3RDLE1BQU0sUUFBUSxHQUFHLElBQUksb0JBQVEsQ0FBQyxFQUFDLE1BQU0sRUFBRSxXQUFXLEVBQUMsQ0FBQyxDQUFBO0FBRXBELEtBQUssVUFBVSxVQUFVLENBQUMsS0FBVTtJQUNoQyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDVCxPQUFPO1lBQ0gsVUFBVSxFQUFFLEdBQUc7WUFDZixPQUFPLEVBQUUsRUFBQyxjQUFjLEVBQUUsa0JBQWtCLEVBQUM7WUFDN0MsSUFBSSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBQyxPQUFPLEVBQUUsd0NBQXdDLEVBQUMsQ0FBQztTQUM1RSxDQUFBO0lBQ0wsQ0FBQztJQUNELE1BQU0sUUFBUSxHQUFHLGNBQWMsQ0FBQyxLQUFLLENBQUMsQ0FBQTtJQUN0Qyw0Q0FBNEM7SUFDNUMsTUFBTSxZQUFZLEdBQUc7UUFDakIsTUFBTSxFQUFFLFVBQVU7UUFDbEIsR0FBRyxFQUFFLFFBQVE7UUFDYixJQUFJLEVBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLFFBQVEsQ0FBQztRQUMxQyxXQUFXLEVBQUUsS0FBSyxDQUFDLFdBQVc7S0FDakMsQ0FBQTtJQUVELElBQUksQ0FBQztRQUNELHNDQUFzQztRQUN0QyxNQUFNLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSw0QkFBZ0IsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFBO1FBRXZELDBFQUEwRTtRQUMxRSx3Q0FBd0M7UUFDeEMsZ0JBQWdCO1FBQ2hCLDZCQUE2QjtRQUM3Qiw4QkFBOEI7UUFDOUIseUJBQXlCO1FBQ3pCLFVBQVU7UUFDVixxREFBcUQ7UUFDckQsSUFBSTtRQUVKLE9BQU87WUFDSCxVQUFVLEVBQUUsR0FBRztZQUNmLFFBQVE7WUFDUixZQUFZO1NBQ2YsQ0FBQTtJQUNMLENBQUM7SUFBQyxPQUFPLEdBQVEsRUFBRSxDQUFDO1FBQ2hCLE9BQU8sQ0FBQyxLQUFLLENBQUMsb0JBQW9CLEVBQUUsR0FBRyxDQUFDLENBQUE7UUFDeEMsT0FBTztZQUNILFVBQVUsRUFBRSxHQUFHO1lBQ2YsT0FBTyxFQUFFLEVBQUMsY0FBYyxFQUFFLGtCQUFrQixFQUFDO1lBQzdDLElBQUksRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDO2dCQUNqQixPQUFPLEVBQUUsMkJBQTJCO2dCQUNwQyxLQUFLLEVBQUUsR0FBRyxDQUFDLE9BQU87YUFDckIsQ0FBQztTQUNMLENBQUE7SUFDTCxDQUFDO0FBQ0wsQ0FBQztBQTJCTyxnQ0FBVTtBQXhCbEIsS0FBSyxVQUFVLFVBQVUsQ0FBQyxRQUFnQjtJQUN0QyxNQUFNLGVBQWUsR0FBRztRQUNwQixNQUFNLEVBQUUsVUFBVTtRQUNsQixHQUFHLEVBQUUsUUFBUTtLQUNoQixDQUFDO0lBQ0YsTUFBTSxFQUFDLElBQUksRUFBQyxHQUFHLE1BQU0sUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLDRCQUFnQixDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUM7SUFDMUUsTUFBTSxjQUFjLEdBQUcsS0FBSyxFQUFFLE1BQVcsRUFBRSxFQUFFO1FBQ3pDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQztRQUNsQixJQUFJLEtBQUssRUFBRSxNQUFNLEtBQUssSUFBSSxNQUFNLEVBQUUsQ0FBQztZQUMvQixNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3ZCLENBQUM7UUFDRCxPQUFPLE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDakMsQ0FBQyxDQUFDO0lBRUYsT0FBTyxNQUFNLGNBQWMsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUN0QyxDQUFDO0FBU21CLGdDQUFVO0FBUDlCLFNBQVMsY0FBYyxDQUFDLEtBQVU7SUFDOUIsTUFBTSxRQUFRLEdBQUcsS0FBSyxDQUFDLFFBQVEsQ0FBQTtJQUMvQixJQUFJLFNBQVMsR0FBRyxRQUFRLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFBO0lBQ25DLElBQUksVUFBVSxHQUFHLFNBQVMsQ0FBQyxTQUFTLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFBO0lBQ2hELE9BQU8sTUFBTSxFQUFFLEdBQUcsR0FBRyxHQUFHLFVBQVUsQ0FBQTtBQUN0QyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtHZXRPYmplY3RDb21tYW5kLCBQdXRPYmplY3RDb21tYW5kLCBTM0NsaWVudH0gZnJvbSBcIkBhd3Mtc2RrL2NsaWVudC1zM1wiXG5pbXBvcnQge2dldFNpZ25lZFVybH0gZnJvbSBcIkBhd3Mtc2RrL3MzLXJlcXVlc3QtcHJlc2lnbmVyXCJcblxuY29uc3Qge3Y0OiB1dWlkdjR9ID0gcmVxdWlyZShcInV1aWRcIilcblxuY29uc3QgYnVja2V0TmFtZSA9IHByb2Nlc3MuZW52LkJVQ0tFVCFcbmNvbnN0IHMzQ2xpZW50ID0gbmV3IFMzQ2xpZW50KHtyZWdpb246IFwidXMtd2VzdC0yXCJ9KVxuXG5hc3luYyBmdW5jdGlvbiB1cGxvYWRUb1MzKGltYWdlOiBhbnkpIHtcbiAgICBpZiAoIWltYWdlKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzdGF0dXNDb2RlOiA0MDAsXG4gICAgICAgICAgICBoZWFkZXJzOiB7XCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCJ9LFxuICAgICAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoe21lc3NhZ2U6IFwiTWlzc2luZyAnZmlsZUZyb21VaScgZmlsZSBpbiBmb3JtLWRhdGFcIn0pLFxuICAgICAgICB9XG4gICAgfVxuICAgIGNvbnN0IGZpbGVOYW1lID0gcmFuZG9tRmlsZU5hbWUoaW1hZ2UpXG4gICAgLy8gQ3JlYXRlIHRoZSBwYXJhbSB0byB1cGxvYWQgdGhlIGZpbGUgaW4gUzNcbiAgICBjb25zdCB1cGxvYWRQYXJhbXMgPSB7XG4gICAgICAgIEJ1Y2tldDogYnVja2V0TmFtZSxcbiAgICAgICAgS2V5OiBmaWxlTmFtZSxcbiAgICAgICAgQm9keTogQnVmZmVyLmZyb20oaW1hZ2UuY29udGVudCwgXCJiaW5hcnlcIiksXG4gICAgICAgIENvbnRlbnRUeXBlOiBpbWFnZS5jb250ZW50VHlwZSxcbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgICAvLyBVcGxvYWQgZGF0YSB0byB0aGUgc3BlY2lmaWVkIGJ1Y2tldFxuICAgICAgICBhd2FpdCBzM0NsaWVudC5zZW5kKG5ldyBQdXRPYmplY3RDb21tYW5kKHVwbG9hZFBhcmFtcykpXG5cbiAgICAgICAgLy8gRXhhbXBsZSB0byBnZW5lcmF0ZSBhIHNpZ25lZCBVUkwgdG8gZGlzcGxheSB0aGUgZmlsZSBpbiB0aGUgZnJvbnQgZW5kIDpcbiAgICAgICAgLy8gY29uc3Qgc2lnbmVkVXJsID0gYXdhaXQgZ2V0U2lnbmVkVXJsKFxuICAgICAgICAvLyAgICAgczNDbGllbnQsXG4gICAgICAgIC8vICAgICBuZXcgR2V0T2JqZWN0Q29tbWFuZCh7XG4gICAgICAgIC8vICAgICAgICAgQnVja2V0OiBidWNrZXROYW1lLFxuICAgICAgICAvLyAgICAgICAgIEtleTogZmlsZU5hbWUsXG4gICAgICAgIC8vICAgICB9KSxcbiAgICAgICAgLy8gICAgIHsgZXhwaXJlc0luOiA2MDAgfSAvLyA2MDAgc2Vjb25kcyA9IDEwIG1pbnV0ZXNcbiAgICAgICAgLy8gKVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzdGF0dXNDb2RlOiAyMDAsXG4gICAgICAgICAgICBmaWxlTmFtZSxcbiAgICAgICAgICAgIC8vIHNpZ25lZFVybFxuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZXJyOiBhbnkpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIGludm9raW5nIFMzOlwiLCBlcnIpXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzdGF0dXNDb2RlOiA1MDAsXG4gICAgICAgICAgICBoZWFkZXJzOiB7XCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCJ9LFxuICAgICAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICAgICAgICAgIG1lc3NhZ2U6IFwiRmFpbGVkIHRvIHVwbG9hZCB0aGUgZmlsZVwiLFxuICAgICAgICAgICAgICAgIGVycm9yOiBlcnIubWVzc2FnZSxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICB9XG4gICAgfVxufVxuXG5cbmFzeW5jIGZ1bmN0aW9uIGxvYWRGcm9tUzMoZmlsZW5hbWU6IHN0cmluZykge1xuICAgIGNvbnN0IGdldE9iamVjdFBhcmFtcyA9IHtcbiAgICAgICAgQnVja2V0OiBidWNrZXROYW1lLFxuICAgICAgICBLZXk6IGZpbGVuYW1lXG4gICAgfTtcbiAgICBjb25zdCB7Qm9keX0gPSBhd2FpdCBzM0NsaWVudC5zZW5kKG5ldyBHZXRPYmplY3RDb21tYW5kKGdldE9iamVjdFBhcmFtcykpO1xuICAgIGNvbnN0IHN0cmVhbVRvQnVmZmVyID0gYXN5bmMgKHN0cmVhbTogYW55KSA9PiB7XG4gICAgICAgIGNvbnN0IGNodW5rcyA9IFtdO1xuICAgICAgICBmb3IgYXdhaXQgKGNvbnN0IGNodW5rIG9mIHN0cmVhbSkge1xuICAgICAgICAgICAgY2h1bmtzLnB1c2goY2h1bmspO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBCdWZmZXIuY29uY2F0KGNodW5rcyk7XG4gICAgfTtcblxuICAgIHJldHVybiBhd2FpdCBzdHJlYW1Ub0J1ZmZlcihCb2R5KTtcbn1cblxuZnVuY3Rpb24gcmFuZG9tRmlsZU5hbWUoaW1hZ2U6IGFueSkge1xuICAgIGNvbnN0IGZpbGVuYW1lID0gaW1hZ2UuZmlsZW5hbWVcbiAgICBsZXQgZmlsZVBhcnRzID0gZmlsZW5hbWUuc3BsaXQoXCIuXCIpXG4gICAgbGV0IGZpbGVGb3JtYXQgPSBmaWxlUGFydHNbZmlsZVBhcnRzLmxlbmd0aCAtIDFdXG4gICAgcmV0dXJuIHV1aWR2NCgpICsgXCIuXCIgKyBmaWxlRm9ybWF0XG59XG5cbmV4cG9ydCB7dXBsb2FkVG9TMywgbG9hZEZyb21TM31cbiJdfQ==