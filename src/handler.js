"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = void 0;
const multipart = require("aws-lambda-multipart-parser");
const s3Utils_1 = require("./utils/s3Utils");
const bedrockUtils_1 = require("./utils/bedrockUtils");
const handler = async function (event, context) {
    let statusCode = 400;
    let bodyResult = null;
    try {
        let method = event.httpMethod;
        console.log("method", method);
        if (method != "POST" || event.path !== "/") {
            // We only accept POST
            bodyResult = "We only accept POST /";
        }
        else {
            // parse the base64 from the API Gateway
            const base64Body = event.body;
            const buff = Buffer.from(base64Body, "base64");
            const decodedEventBody = buff.toString("latin1");
            const decodedEvent = { ...event, body: decodedEventBody };
            const formObject = multipart.parse(decodedEvent, false);
            // productImage is the form-data key associated to the file in the multipart
            const image = formObject.productImage;
            // Example of getting description from Bedrock
            const bedRockResult = await (0, bedrockUtils_1.default)(image);
            if (bedRockResult.statusCode != 200) {
                return bedRockResult; // return the error as is
            }
            else {
                statusCode = 200;
                const { productInfo } = bedRockResult;
                bodyResult = {
                    productInfo,
                };
            }
            // Optional :  Example of uploading the file in S3
            const s3result = await (0, s3Utils_1.default)(image);
            if (s3result.statusCode == 200) {
                const { fileName } = s3result;
                bodyResult = { ...bodyResult, fileName };
            }
        }
    }
    catch (error) {
        if (error instanceof Error) {
            bodyResult = error.stack;
        }
        else {
            bodyResult = error;
        }
    }
    const result = {
        statusCode,
        headers: {
            "Access-Control-Allow-Origin": "*",
            "Content-Type": "application/json",
        },
        body: JSON.stringify(bodyResult),
    };
    console.log("final result", result);
    return result;
};
exports.handler = handler;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFuZGxlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImhhbmRsZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsTUFBTSxTQUFTLEdBQUcsT0FBTyxDQUFDLDZCQUE2QixDQUFDLENBQUE7QUFFeEQsNkNBQXdDO0FBQ3hDLHVEQUFrRDtBQUVsRCxNQUFNLE9BQU8sR0FBRyxLQUFLLFdBQVcsS0FBVSxFQUFFLE9BQVk7SUFDcEQsSUFBSSxVQUFVLEdBQUcsR0FBRyxDQUFBO0lBQ3BCLElBQUksVUFBVSxHQUFHLElBQUksQ0FBQTtJQUVyQixJQUFJLENBQUM7UUFDRCxJQUFJLE1BQU0sR0FBRyxLQUFLLENBQUMsVUFBVSxDQUFBO1FBQzdCLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFFLE1BQU0sQ0FBQyxDQUFBO1FBQzdCLElBQUksTUFBTSxJQUFJLE1BQU0sSUFBSSxLQUFLLENBQUMsSUFBSSxLQUFLLEdBQUcsRUFBRSxDQUFDO1lBQ3pDLHNCQUFzQjtZQUN0QixVQUFVLEdBQUcsdUJBQXVCLENBQUE7UUFDeEMsQ0FBQzthQUFNLENBQUM7WUFDSix3Q0FBd0M7WUFDeEMsTUFBTSxVQUFVLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQTtZQUM3QixNQUFNLElBQUksR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxRQUFRLENBQUMsQ0FBQTtZQUM5QyxNQUFNLGdCQUFnQixHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUE7WUFDaEQsTUFBTSxZQUFZLEdBQUcsRUFBRSxHQUFHLEtBQUssRUFBRSxJQUFJLEVBQUUsZ0JBQWdCLEVBQUUsQ0FBQTtZQUN6RCxNQUFNLFVBQVUsR0FBRyxTQUFTLENBQUMsS0FBSyxDQUFDLFlBQVksRUFBRSxLQUFLLENBQUMsQ0FBQTtZQUV2RCw0RUFBNEU7WUFDNUUsTUFBTSxLQUFLLEdBQUcsVUFBVSxDQUFDLFlBQVksQ0FBQTtZQUVyQyw4Q0FBOEM7WUFDOUMsTUFBTSxhQUFhLEdBQUcsTUFBTSxJQUFBLHNCQUFlLEVBQUMsS0FBSyxDQUFDLENBQUE7WUFDbEQsSUFBSSxhQUFhLENBQUMsVUFBVSxJQUFJLEdBQUcsRUFBRSxDQUFDO2dCQUNsQyxPQUFPLGFBQWEsQ0FBQSxDQUFDLHlCQUF5QjtZQUNsRCxDQUFDO2lCQUFNLENBQUM7Z0JBQ0osVUFBVSxHQUFHLEdBQUcsQ0FBQTtnQkFDaEIsTUFBTSxFQUFFLFdBQVcsRUFBRSxHQUFHLGFBQWEsQ0FBQTtnQkFDckMsVUFBVSxHQUFHO29CQUNULFdBQVc7aUJBQ2QsQ0FBQTtZQUNMLENBQUM7WUFFRCxrREFBa0Q7WUFDbEQsTUFBTSxRQUFRLEdBQUcsTUFBTSxJQUFBLGlCQUFVLEVBQUMsS0FBSyxDQUFDLENBQUE7WUFFeEMsSUFBSSxRQUFRLENBQUMsVUFBVSxJQUFJLEdBQUcsRUFBRSxDQUFDO2dCQUM3QixNQUFNLEVBQUUsUUFBUSxFQUFFLEdBQUcsUUFBUSxDQUFBO2dCQUM3QixVQUFVLEdBQUcsRUFBRSxHQUFHLFVBQVUsRUFBRSxRQUFRLEVBQUUsQ0FBQTtZQUM1QyxDQUFDO1FBQ0wsQ0FBQztJQUNMLENBQUM7SUFBQyxPQUFPLEtBQUssRUFBRSxDQUFDO1FBQ2IsSUFBSSxLQUFLLFlBQVksS0FBSyxFQUFFLENBQUM7WUFDekIsVUFBVSxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUE7UUFDNUIsQ0FBQzthQUFNLENBQUM7WUFDSixVQUFVLEdBQUcsS0FBSyxDQUFBO1FBQ3RCLENBQUM7SUFDTCxDQUFDO0lBRUQsTUFBTSxNQUFNLEdBQUc7UUFDWCxVQUFVO1FBQ1YsT0FBTyxFQUFFO1lBQ0wsNkJBQTZCLEVBQUUsR0FBRztZQUNsQyxjQUFjLEVBQUUsa0JBQWtCO1NBQ3JDO1FBQ0QsSUFBSSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDO0tBQ25DLENBQUE7SUFDRCxPQUFPLENBQUMsR0FBRyxDQUFDLGNBQWMsRUFBRSxNQUFNLENBQUMsQ0FBQTtJQUNuQyxPQUFPLE1BQU0sQ0FBQTtBQUNqQixDQUFDLENBQUE7QUFFUSwwQkFBTyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IG11bHRpcGFydCA9IHJlcXVpcmUoXCJhd3MtbGFtYmRhLW11bHRpcGFydC1wYXJzZXJcIilcblxuaW1wb3J0IHVwbG9hZFRvUzMgZnJvbSBcIi4vdXRpbHMvczNVdGlsc1wiXG5pbXBvcnQgZGVzY3JpYmVQaWN0dXJlIGZyb20gXCIuL3V0aWxzL2JlZHJvY2tVdGlsc1wiXG5cbmNvbnN0IGhhbmRsZXIgPSBhc3luYyBmdW5jdGlvbiAoZXZlbnQ6IGFueSwgY29udGV4dDogYW55KSB7XG4gICAgbGV0IHN0YXR1c0NvZGUgPSA0MDBcbiAgICBsZXQgYm9keVJlc3VsdCA9IG51bGxcblxuICAgIHRyeSB7XG4gICAgICAgIGxldCBtZXRob2QgPSBldmVudC5odHRwTWV0aG9kXG4gICAgICAgIGNvbnNvbGUubG9nKFwibWV0aG9kXCIsIG1ldGhvZClcbiAgICAgICAgaWYgKG1ldGhvZCAhPSBcIlBPU1RcIiB8fCBldmVudC5wYXRoICE9PSBcIi9cIikge1xuICAgICAgICAgICAgLy8gV2Ugb25seSBhY2NlcHQgUE9TVFxuICAgICAgICAgICAgYm9keVJlc3VsdCA9IFwiV2Ugb25seSBhY2NlcHQgUE9TVCAvXCJcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIHBhcnNlIHRoZSBiYXNlNjQgZnJvbSB0aGUgQVBJIEdhdGV3YXlcbiAgICAgICAgICAgIGNvbnN0IGJhc2U2NEJvZHkgPSBldmVudC5ib2R5XG4gICAgICAgICAgICBjb25zdCBidWZmID0gQnVmZmVyLmZyb20oYmFzZTY0Qm9keSwgXCJiYXNlNjRcIilcbiAgICAgICAgICAgIGNvbnN0IGRlY29kZWRFdmVudEJvZHkgPSBidWZmLnRvU3RyaW5nKFwibGF0aW4xXCIpXG4gICAgICAgICAgICBjb25zdCBkZWNvZGVkRXZlbnQgPSB7IC4uLmV2ZW50LCBib2R5OiBkZWNvZGVkRXZlbnRCb2R5IH1cbiAgICAgICAgICAgIGNvbnN0IGZvcm1PYmplY3QgPSBtdWx0aXBhcnQucGFyc2UoZGVjb2RlZEV2ZW50LCBmYWxzZSlcblxuICAgICAgICAgICAgLy8gcHJvZHVjdEltYWdlIGlzIHRoZSBmb3JtLWRhdGEga2V5IGFzc29jaWF0ZWQgdG8gdGhlIGZpbGUgaW4gdGhlIG11bHRpcGFydFxuICAgICAgICAgICAgY29uc3QgaW1hZ2UgPSBmb3JtT2JqZWN0LnByb2R1Y3RJbWFnZVxuXG4gICAgICAgICAgICAvLyBFeGFtcGxlIG9mIGdldHRpbmcgZGVzY3JpcHRpb24gZnJvbSBCZWRyb2NrXG4gICAgICAgICAgICBjb25zdCBiZWRSb2NrUmVzdWx0ID0gYXdhaXQgZGVzY3JpYmVQaWN0dXJlKGltYWdlKVxuICAgICAgICAgICAgaWYgKGJlZFJvY2tSZXN1bHQuc3RhdHVzQ29kZSAhPSAyMDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYmVkUm9ja1Jlc3VsdCAvLyByZXR1cm4gdGhlIGVycm9yIGFzIGlzXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHN0YXR1c0NvZGUgPSAyMDBcbiAgICAgICAgICAgICAgICBjb25zdCB7IHByb2R1Y3RJbmZvIH0gPSBiZWRSb2NrUmVzdWx0XG4gICAgICAgICAgICAgICAgYm9keVJlc3VsdCA9IHtcbiAgICAgICAgICAgICAgICAgICAgcHJvZHVjdEluZm8sXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBPcHRpb25hbCA6ICBFeGFtcGxlIG9mIHVwbG9hZGluZyB0aGUgZmlsZSBpbiBTM1xuICAgICAgICAgICAgY29uc3QgczNyZXN1bHQgPSBhd2FpdCB1cGxvYWRUb1MzKGltYWdlKVxuXG4gICAgICAgICAgICBpZiAoczNyZXN1bHQuc3RhdHVzQ29kZSA9PSAyMDApIHtcbiAgICAgICAgICAgICAgICBjb25zdCB7IGZpbGVOYW1lIH0gPSBzM3Jlc3VsdFxuICAgICAgICAgICAgICAgIGJvZHlSZXN1bHQgPSB7IC4uLmJvZHlSZXN1bHQsIGZpbGVOYW1lIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAgICAgICBib2R5UmVzdWx0ID0gZXJyb3Iuc3RhY2tcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGJvZHlSZXN1bHQgPSBlcnJvclxuICAgICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgcmVzdWx0ID0ge1xuICAgICAgICBzdGF0dXNDb2RlLFxuICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICBcIkFjY2Vzcy1Db250cm9sLUFsbG93LU9yaWdpblwiOiBcIipcIixcbiAgICAgICAgICAgIFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxuICAgICAgICB9LFxuICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShib2R5UmVzdWx0KSxcbiAgICB9XG4gICAgY29uc29sZS5sb2coXCJmaW5hbCByZXN1bHRcIiwgcmVzdWx0KVxuICAgIHJldHVybiByZXN1bHRcbn1cblxuZXhwb3J0IHsgaGFuZGxlciB9XG4iXX0=